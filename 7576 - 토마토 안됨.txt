#include <iostream>
#include <cstdio>
#include <queue>

// BFS의 목적은 임의의 정점에서 시작하여 모든 정점을 한번씩 방문하는 것
// BFS는 최단거리를 구하는 알고리즘 -- 모든 가중치가 1일 때
// 1. 최소비용 문제여야 한다(여기서 비용이란 가중치를 의미)
// 2. 간선의 가중치가 1이어야 한다.
// 3. 정점과 간선의 갯수가 시간, 메모리 제한에 걸리지 않아야 한다.
// (1,1)->(n,m) 가장 빠른길... DFS로는 못풀음. BFS로 풀어야함
// BFS가 단계별로 진행된다는 사실 이용.

//여러분은 토마토가 모두 익을 때까지의 최소 날짜를 출력해야 한다.
//BFS 탐색을 하면서 거리를 재는 방식

using namespace std;

int dx[] = {1, -1, 0, 0};
int dy[] = {0, 0, 1, -1};
int a[1001][1001] = { 0 };
int d[1001][1001];
int n, m, cnt = 0;
queue <pair <int, int>> q;

void bfs() {
	while (!q.empty()) {
		int x = q.front().first;//x 넣고
		int y = q.front().second;//y 넣고
		q.pop();
		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (nx >= 0 && nx < n && ny >= 0 && ny < m) {
				if (a[nx][ny] == 0 && d[nx][ny] == -1) {
					d[nx][ny] = d[x][y]+1; // 전에거에서 하나만 더하기
					q.push(make_pair(nx, ny));
				}
			}
		}
	}
}

int main() {
	scanf_s("%d %d", &m, &n);
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			scanf_s("%d ", &a[i][j]);
			d[i][j] = -1;
			if (a[i][j] == 1) {
				q.push(make_pair(i, j));
				d[i][j] = 0;
			}
		}
	}
	bfs();
	
	int ans = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (ans < d[i][j]) {
				ans = d[i][j];
			}
		}
	}
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (a[i][j] == 0 && d[i][j] == -1) {
				ans = -1;
			}
		}
	}

	printf("%d\n", ans);
	return 0;
	
	return 0;

}