#include <iostream>
#include <queue>
#include <tuple>
#include <deque>
using namespace std;
int n, m;
int check[1001][1001];
int a[1001][1001];
int d[1001][1001][2] = {0};

int dx[] = { 1, -1, 0, 0 };
int dy[] = { 0, 0, 1, -1 };

// 최단경로는 맵에서 가장 적은 개수의 칸을 지나는 경로
//벽은 단 한번만 부술 수 있음

int main() {
	cin >> n >> m;
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++) {
			scanf_s("%1d", &a[i][j]);
			check[i][] = -1;
		}
	}
	deque <tuple <int, int, int>> dq;
	dq.push_back(make_tuple(1, 1, 0)); // first 아닌 get<0>(dq)
	d[1001][1001][2] = 1;
	deque <tuple <int, int, int>> dq1;
	while (!dq.empty()) {
		dq1 = make_tuple(dq.front());
		int x1 = get<0>(dq1);
		int y1 = get<1>(dq1);
		int z = get<2>(dq1);
		dq.pop_front();
		for (int i = 0; i < 4; i++) {
			int x2 = x1 + dx[i];
			int y2 = y1 + dy[i];
			if (x2>=1 && x2<= n && y2 >= 1 && x2 <= m) {
				if (check[x2][y2] == -1 && a[x2][y2] == 0) { // 벽안부수기
					dq.push_front(make_pair(x2, y2));
					check[x2][y2] = check[x1][y1];
				}
				if (check[x2][y2] == -1 && a[x2][y2] == 1) {//벽부수기
					dq.push_back(make_pair(x2, y2));
					check[x2][y2] = check[x1][y1] + 1;
				}
			}
		}
	}

	if(d[n][m][0] > d[n][m][1]) cout << d[n][m][1] << endl;
	else cout << d[n][m][0] << endl;
}

#include <iostream>
#include <queue>
#include <cstdio>
#include <tuple>
using namespace std;
int a[1000][1000];
int d[1000][1000][2];
int dx[] = { 0, 0, 1, -1 };
int dy[] = { 1, -1, 0, 0 };
int main() {
	int n, m;
	scanf_s("%d %d", &n, &m);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			scanf_s("%1d", &a[i][j]);
		}
	}
	queue<tuple<int, int, int>> q;
	d[0][0][0] = 1;
	q.push(make_tuple(0, 0, 0));
	while (!q.empty()) {
		int x, y, z;
		tie(x, y, z) = q.front(); q.pop();
		for (int k = 0; k < 4; k++) {
			int nx = x + dx[k];
			int ny = y + dy[k];
			if (nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
			if (a[nx][ny] == 0 && d[nx][ny][z] == 0) {
				d[nx][ny][z] = d[x][y][z] + 1;
				q.push(make_tuple(nx, ny, z));
				printf("(%d %d z = %d d  %d)", nx, ny, z, d[x][y][z]);
			}
			if (z == 0 && a[nx][ny] == 1 && d[nx][ny][z + 1] == 0) {
				d[nx][ny][z + 1] = d[x][y][z] + 1;
				q.push(make_tuple(nx, ny, z + 1));
				printf("(%d %d z = %d d  %d)", nx, ny, z, d[x][y][z]);
			}
		}
		cout << endl;
	}
	if (d[n - 1][m - 1][0] != 0 && d[n - 1][m - 1][1] != 0) {
		cout << min(d[n - 1][m - 1][0], d[n - 1][m - 1][1]);
	}
	else if (d[n - 1][m - 1][0] != 0) {
		cout << d[n - 1][m - 1][0];
	}
	else if (d[n - 1][m - 1][1] != 0) {
		cout << d[n - 1][m - 1][1];
	}
	else {
		cout << -1;
	}
	cout << '\n';
	return 0;
}
//이미 방문한 정점이어도 z때문에 다른 경로로 인식