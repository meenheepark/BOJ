#include <iostream>
#include <vector>
#include <queue>
#include <cstdio>
#include<algorithm>

using namespace std;
// 플러드필 - 어떤 위치와 연결된 모든 위치를 찾는 알고리즘
// 연결 : 좌우위아래로 집이 있는 경우(1)
int d[25][25] = { 0 }; // 단지번호 붙이는 배열
int v[25][25]; // 인접행렬
int dx[4] = { 1, -1, 0, 0 };
int dy[4] = { 0, 0, -1, 1 };
int n = 0;
int cnt = 0;
void bfs(int x, int y, int cnt) {
	queue <pair <int, int>> q;
	q.push(make_pair(x, y));
	d[x][y] = cnt;
	while (!q.empty()) {
		x = q.front().first; y = q.front().second;
		d[x][y] = cnt;
		q.pop();
		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (nx >= 0 && nx < n && ny >= 0 && ny <= n) {
				if (v[nx][ny] == 1 && d[nx][ny] == 0) {
					d[nx][ny] = cnt;
					q.push(make_pair(nx, ny));
				}
			}
		}
	}
}


int main() {
	int k;
	int from, to;
	cin >> k;
	n = k;
	for (int i = 0; i < k; i++) {
		for (int j = 0; j < k; j++) {
			scanf("%1d", &v[i][j]);
		}
	}
	for (int i = 0; i < k; i++) {
		for (int j = 0; j < k; j++) {
			if (d[i][j] == 0 && v[i][j] == 1) {
				bfs(i, j, ++cnt); // 연결요소같이... 다른 단지 찾아감
			}
		}
	}
	int a[25 * 25] = {0};

		for (int i = 0; i < k; i++) {
			for (int j = 0; j < k; j++) {
				a[d[i][j]]++;
			}
		}


	printf("%d\n", cnt);
	sort(a+1, a+cnt+1);
	for(int j = 0; j < cnt; j++) {
		printf("%d\n", a[j+1]);
	}
}